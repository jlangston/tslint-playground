{"version":3,"sources":["../node_modules/tslint/lib/rules/preferReadonlyRule.js","../node_modules/tslint/lib/language/typeUtils.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","utils","ts","Lint","typeUtils_1","Rule","_super","apply","this","arguments","__extends","prototype","applyWithProgram","sourceFile","program","options","onlyInlineLambdas","ruleArguments","indexOf","applyWithFunction","walk","getTypeChecker","metadata","description","descriptionDetails","Utils","dedent","templateObject_1","__makeTemplateObject","optionExamples","enum","type","optionsDescription","templateObject_2","rationale","templateObject_3","requiresTypeInfo","ruleName","typescriptOnly","Rules","TypedRule","context","typeChecker","scope","isDeclarationFile","forEachChild","visitNode","node","hasModifier","modifiers","SyntaxKind","DeclareKeyword","kind","ClassDeclaration","ClassExpression","parentScope","childScope","ClassScope","_i","_a","finalizeUnmodifiedPrivateNonReadonlys","length","violatingNode","fix","Replacement","appendText","end","addFailureAtNode","name","accessibility","isModifierFlagSet","ModifierFlags","Static","text","getText","createFailureString","finalizeScope","handleClassDeclarationOrExpression","Constructor","enterConstructor","parameters","parameter","Private","addDeclaredVariable","exitConstructor","handleConstructor","PropertyDeclaration","undefined","initializer","ArrowFunction","shouldPropertyDeclarationBeIgnored","handlePropertyDeclaration","PropertyAccessExpression","parent","BinaryExpression","left","isAssignmentKind","operatorToken","addVariableModification","handleParentBinaryExpression","DeleteExpression","handleDeleteExpression","PostfixUnaryExpression","PrefixUnaryExpression","operator","PlusPlusToken","MinusMinusToken","operand","handleParentPostfixOrPrefixUnaryExpression","handlePropertyAccessExpression","isFunctionScopeBoundary","enterNonConstructorScope","exitNonConstructorScope","handleFunctionScopeBoundary","OUTSIDE_CONSTRUCTOR","classNode","privateModifiableMembers","Map","privateModifiableStatics","memberVariableModifications","Set","staticVariableModifications","constructorScopeDepth","classType","getTypeAtLocation","Readonly","ComputedPropertyName","set","modifierType","expression","symbol","typeIsOrHasBaseType","toStatic","isObjectType","isObjectFlagSet","ObjectFlags","Anonymous","variable","add","_this","forEach","variableName","delete","Array","from","values","concat","parentType","typeAndBaseTypes","ancestorTypes","getBaseTypes","push","typeAndBaseTypes_1","baseType"],"mappings":"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","file":"static/js/12.c1422a3c.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar utils = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar typeUtils_1 = require(\"../language/typeUtils\");\nvar OPTION_ONLY_INLINE_LAMBDAS = \"only-inline-lambdas\";\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.applyWithProgram = function (sourceFile, program) {\n        var options = {\n            onlyInlineLambdas: this.ruleArguments.indexOf(OPTION_ONLY_INLINE_LAMBDAS) !== -1,\n        };\n        return this.applyWithFunction(sourceFile, walk, options, program.getTypeChecker());\n    };\n    Rule.metadata = {\n        description: \"Requires that private variables are marked as `readonly` if they're never modified outside of the constructor.\",\n        descriptionDetails: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            If a private variable is only assigned to in the constructor, it should be declared as `readonly`.\\n        \"], [\"\\n            If a private variable is only assigned to in the constructor, it should be declared as \\\\`readonly\\\\`.\\n        \"]))),\n        optionExamples: [\n            true,\n            [true, OPTION_ONLY_INLINE_LAMBDAS],\n        ],\n        options: {\n            enum: [OPTION_ONLY_INLINE_LAMBDAS],\n            type: \"string\",\n        },\n        optionsDescription: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            If `\", \"` is specified, only immediately-declared arrow functions are checked.\"], [\"\\n            If \\\\`\", \"\\\\` is specified, only immediately-declared arrow functions are checked.\"])), OPTION_ONLY_INLINE_LAMBDAS),\n        rationale: Lint.Utils.dedent(templateObject_3 || (templateObject_3 = tslib_1.__makeTemplateObject([\"\\n            Marking never-modified variables as readonly helps enforce the code's intent of keeping them as never-modified.\\n            It can also help prevent accidental changes of members not meant to be changed.\"], [\"\\n            Marking never-modified variables as readonly helps enforce the code's intent of keeping them as never-modified.\\n            It can also help prevent accidental changes of members not meant to be changed.\"]))),\n        requiresTypeInfo: true,\n        ruleName: \"prefer-readonly\",\n        type: \"maintainability\",\n        typescriptOnly: true,\n    };\n    return Rule;\n}(Lint.Rules.TypedRule));\nexports.Rule = Rule;\nfunction walk(context, typeChecker) {\n    if (context.sourceFile.isDeclarationFile) {\n        return;\n    }\n    var scope;\n    ts.forEachChild(context.sourceFile, visitNode);\n    function visitNode(node) {\n        if (utils.hasModifier(node.modifiers, ts.SyntaxKind.DeclareKeyword)) {\n            return;\n        }\n        switch (node.kind) {\n            case ts.SyntaxKind.ClassDeclaration:\n            case ts.SyntaxKind.ClassExpression:\n                handleClassDeclarationOrExpression(node);\n                break;\n            case ts.SyntaxKind.Constructor:\n                handleConstructor(node);\n                break;\n            case ts.SyntaxKind.PropertyDeclaration:\n                handlePropertyDeclaration(node);\n                break;\n            case ts.SyntaxKind.PropertyAccessExpression:\n                if (scope !== undefined) {\n                    handlePropertyAccessExpression(node, node.parent);\n                }\n                break;\n            default:\n                if (utils.isFunctionScopeBoundary(node)) {\n                    handleFunctionScopeBoundary(node);\n                }\n                else {\n                    ts.forEachChild(node, visitNode);\n                }\n        }\n    }\n    function handleFunctionScopeBoundary(node) {\n        if (scope === undefined) {\n            ts.forEachChild(node, visitNode);\n            return;\n        }\n        scope.enterNonConstructorScope();\n        ts.forEachChild(node, visitNode);\n        scope.exitNonConstructorScope();\n    }\n    function handleClassDeclarationOrExpression(node) {\n        var parentScope = scope;\n        var childScope = scope = new ClassScope(node, typeChecker);\n        ts.forEachChild(node, visitNode);\n        finalizeScope(childScope);\n        scope = parentScope;\n    }\n    function handleConstructor(node) {\n        scope.enterConstructor();\n        for (var _i = 0, _a = node.parameters; _i < _a.length; _i++) {\n            var parameter = _a[_i];\n            if (utils.isModifierFlagSet(parameter, ts.ModifierFlags.Private)) {\n                scope.addDeclaredVariable(parameter);\n            }\n        }\n        ts.forEachChild(node, visitNode);\n        scope.exitConstructor();\n    }\n    function handlePropertyDeclaration(node) {\n        if (!shouldPropertyDeclarationBeIgnored(node)) {\n            scope.addDeclaredVariable(node);\n        }\n        ts.forEachChild(node, visitNode);\n    }\n    function handlePropertyAccessExpression(node, parent) {\n        switch (parent.kind) {\n            case ts.SyntaxKind.BinaryExpression:\n                handleParentBinaryExpression(node, parent);\n                break;\n            case ts.SyntaxKind.DeleteExpression:\n                handleDeleteExpression(node);\n                break;\n            case ts.SyntaxKind.PostfixUnaryExpression:\n            case ts.SyntaxKind.PrefixUnaryExpression:\n                handleParentPostfixOrPrefixUnaryExpression(parent);\n        }\n        ts.forEachChild(node, visitNode);\n    }\n    function handleParentBinaryExpression(node, parent) {\n        if (parent.left === node && utils.isAssignmentKind(parent.operatorToken.kind)) {\n            scope.addVariableModification(node);\n        }\n    }\n    function handleParentPostfixOrPrefixUnaryExpression(node) {\n        if (node.operator === ts.SyntaxKind.PlusPlusToken || node.operator === ts.SyntaxKind.MinusMinusToken) {\n            scope.addVariableModification(node.operand);\n        }\n    }\n    function handleDeleteExpression(node) {\n        scope.addVariableModification(node);\n    }\n    function shouldPropertyDeclarationBeIgnored(node) {\n        if (!context.options.onlyInlineLambdas) {\n            return false;\n        }\n        return node.initializer === undefined || node.initializer.kind !== ts.SyntaxKind.ArrowFunction;\n    }\n    function finalizeScope(childScope) {\n        for (var _i = 0, _a = childScope.finalizeUnmodifiedPrivateNonReadonlys(); _i < _a.length; _i++) {\n            var violatingNode = _a[_i];\n            complainOnNode(violatingNode);\n        }\n    }\n    function complainOnNode(node) {\n        var fix = Lint.Replacement.appendText(node.modifiers.end, \" readonly\");\n        context.addFailureAtNode(node.name, createFailureString(node), fix);\n    }\n}\nfunction createFailureString(node) {\n    var accessibility = utils.isModifierFlagSet(node, ts.ModifierFlags.Static)\n        ? \"static\"\n        : \"member\";\n    var text = node.name.getText();\n    return \"Private \" + accessibility + \" variable '\" + text + \"' is never reassigned; mark it as 'readonly'.\";\n}\nvar OUTSIDE_CONSTRUCTOR = -1;\nvar DIRECTLY_INSIDE_CONSTRUCTOR = 0;\nvar ClassScope = /** @class */ (function () {\n    function ClassScope(classNode, typeChecker) {\n        this.privateModifiableMembers = new Map();\n        this.privateModifiableStatics = new Map();\n        this.memberVariableModifications = new Set();\n        this.staticVariableModifications = new Set();\n        this.constructorScopeDepth = OUTSIDE_CONSTRUCTOR;\n        this.classType = typeChecker.getTypeAtLocation(classNode);\n        this.typeChecker = typeChecker;\n    }\n    ClassScope.prototype.addDeclaredVariable = function (node) {\n        if (!utils.isModifierFlagSet(node, ts.ModifierFlags.Private)\n            || utils.isModifierFlagSet(node, ts.ModifierFlags.Readonly)\n            || node.name.kind === ts.SyntaxKind.ComputedPropertyName) {\n            return;\n        }\n        if (utils.isModifierFlagSet(node, ts.ModifierFlags.Static)) {\n            this.privateModifiableStatics.set(node.name.getText(), node);\n        }\n        else {\n            this.privateModifiableMembers.set(node.name.getText(), node);\n        }\n    };\n    ClassScope.prototype.addVariableModification = function (node) {\n        var modifierType = this.typeChecker.getTypeAtLocation(node.expression);\n        if (modifierType.symbol === undefined || !typeUtils_1.typeIsOrHasBaseType(modifierType, this.classType)) {\n            return;\n        }\n        var toStatic = utils.isObjectType(modifierType) && utils.isObjectFlagSet(modifierType, ts.ObjectFlags.Anonymous);\n        if (!toStatic && this.constructorScopeDepth === DIRECTLY_INSIDE_CONSTRUCTOR) {\n            return;\n        }\n        var variable = node.name.text;\n        (toStatic ? this.staticVariableModifications : this.memberVariableModifications).add(variable);\n    };\n    ClassScope.prototype.enterConstructor = function () {\n        this.constructorScopeDepth = DIRECTLY_INSIDE_CONSTRUCTOR;\n    };\n    ClassScope.prototype.exitConstructor = function () {\n        this.constructorScopeDepth = OUTSIDE_CONSTRUCTOR;\n    };\n    ClassScope.prototype.enterNonConstructorScope = function () {\n        if (this.constructorScopeDepth !== OUTSIDE_CONSTRUCTOR) {\n            this.constructorScopeDepth += 1;\n        }\n    };\n    ClassScope.prototype.exitNonConstructorScope = function () {\n        if (this.constructorScopeDepth !== OUTSIDE_CONSTRUCTOR) {\n            this.constructorScopeDepth -= 1;\n        }\n    };\n    ClassScope.prototype.finalizeUnmodifiedPrivateNonReadonlys = function () {\n        var _this = this;\n        this.memberVariableModifications.forEach(function (variableName) {\n            _this.privateModifiableMembers.delete(variableName);\n        });\n        this.staticVariableModifications.forEach(function (variableName) {\n            _this.privateModifiableStatics.delete(variableName);\n        });\n        return Array.from(this.privateModifiableMembers.values()).concat(Array.from(this.privateModifiableStatics.values()));\n    };\n    return ClassScope;\n}());\nvar templateObject_1, templateObject_2, templateObject_3;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/preferReadonlyRule.js\n// module id = 2125\n// module chunks = 12","\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.typeIsOrHasBaseType = function (type, parentType) {\n    if (type.symbol === undefined || parentType.symbol === undefined) {\n        return false;\n    }\n    var typeAndBaseTypes = [type];\n    var ancestorTypes = type.getBaseTypes();\n    if (ancestorTypes !== undefined) {\n        typeAndBaseTypes.push.apply(typeAndBaseTypes, ancestorTypes);\n    }\n    for (var _i = 0, typeAndBaseTypes_1 = typeAndBaseTypes; _i < typeAndBaseTypes_1.length; _i++) {\n        var baseType = typeAndBaseTypes_1[_i];\n        if (baseType.symbol !== undefined && baseType.symbol.name === parentType.symbol.name) {\n            return true;\n        }\n    }\n    return false;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/language/typeUtils.js\n// module id = 2178\n// module chunks = 12"],"sourceRoot":""}