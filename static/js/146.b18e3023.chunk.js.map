{"version":3,"sources":["../node_modules/tslint/lib/rules/arrowReturnShorthandRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","templateObject_2","tslib_1","__webpack_require__","utils","ts","Lint","utils_1","Rule","_super","apply","this","arguments","__extends","FAILURE_STRING","isObjectLiteral","prototype","sourceFile","applyWithFunction","walk","multiline","ruleArguments","indexOf","metadata","ruleName","description","hasFix","optionsDescription","Utils","dedent","__makeTemplateObject","options","type","enum","optionExamples","rationale","typescriptOnly","Rules","AbstractRule","ctx","forEachChild","cb","node","isArrowFunction","isBlock","body","expr","block","statements","length","kind","SyntaxKind","ReturnStatement","expression","undefined","isSameLine","getStart","end","ObjectLiteralExpression","addFailureAtNode","arrowFunction","text","statement","parent","returnKeyword","getChildOfKind","ReturnKeyword","arrow","EqualsGreaterThanToken","openBrace","OpenBraceToken","closeBrace","CloseBraceToken","semicolon","SemicolonToken","hasComments","Replacement","appendText","getEnd","concat","deleteFromTo","hasCommentAfterPosition","createFix"],"mappings":"sDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAmFAC,EAAAC,EAnFAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAAJ,EAAA,KAEAK,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KA4BA,OA9BAT,EAAAW,UAAAL,EAAAC,GAKAD,EAAAM,eAAA,SAAAC,GAEA,MADA,oGACAA,EAAA,0DAEAP,EAAAQ,UAAAN,MAAA,SAAAO,GACA,OAAAN,KAAAO,kBAAAD,EAAAE,GAAyDC,WAAA,IAAAT,KAAAU,cAAAC,QAZzD,gBAeAd,EAAAe,UACAC,SAAA,yBACAC,YAAA,0DACAC,QAAA,EACAC,mBAAArB,EAAAsB,MAAAC,OAAA7B,MAAAE,EAAA4B,sBAAA,qNAnBA,aAoBAC,SACAC,KAAA,SACAC,MAtBA,cAwBAC,iBACA,IACA,EA1BA,cA4BAC,UAAA7B,EAAAsB,MAAAC,OAAA5B,MAAAC,EAAA4B,sBAAA,+KAAsK,yLACtKE,KAAA,QACAI,gBAAA,GAEA5B,EA/BA,CAgCCF,EAAA+B,MAAAC,cAED,SAAAnB,EAAAoB,GACA,IAAAtB,EAAAsB,EAAAtB,WAAAG,EAAAmB,EAAAR,QAAAX,UACA,OAAAf,EAAAmC,aAAAvB,EAAA,SAAAwB,EAAAC,GACA,GAAAtC,EAAAuC,gBAAAD,IAAAtC,EAAAwC,QAAAF,EAAAG,MAAA,CACA,IAAAC,EAmCA,KADAC,EAlCAL,EAAAG,MAmCAG,WAAAC,QAAAF,EAAAC,WAAA,GAAAE,OAAA7C,EAAA8C,WAAAC,gBACAL,EAAAC,WAAA,GAAAK,gBACAC,EApCA,QAAAA,IAAAR,IAAA1B,GAAAhB,EAAAmD,WAAAtC,EAAAyB,EAAAG,KAAAW,SAAAvC,GAAAyB,EAAAG,KAAAY,MAAA,CACA,IAAA1C,EAAA+B,EAAAI,OAAA7C,EAAA8C,WAAAO,wBACAnB,EAAAoB,iBAAAjB,EAAAG,KAAArC,EAAAM,eAAAC,GAMA,SAAA6C,EAAAf,EAAAC,EAAAe,GACA,IAAAC,EAAAhB,EAAAiB,OACAC,EAAA5D,EAAA6D,eAAAH,EAAAzD,EAAA8C,WAAAe,eACAC,EAAA/D,EAAA6D,eAAAL,EAAAvD,EAAA8C,WAAAiB,wBACAC,EAAAjE,EAAA6D,eAAApB,EAAAxC,EAAA8C,WAAAmB,gBACAC,EAAAnE,EAAA6D,eAAApB,EAAAxC,EAAA8C,WAAAqB,iBACAC,EAAArE,EAAA6D,eAAAH,EAAAzD,EAAA8C,WAAAuB,gBAGA,OAFAC,EAAAR,IAAAQ,EAAAN,IAAAM,EAAAb,IAAAa,EAAAX,IACAW,EAAA7B,SAAAQ,IAAAmB,GAAAE,EAAAF,IAAAE,EAAAJ,QACAjB,GAAAR,EAAAI,OAAA7C,EAAA8C,WAAAO,yBACApD,EAAAsE,YAAAC,WAAA/B,EAAAU,WAAA,KACAlD,EAAAsE,YAAAC,WAAA/B,EAAAgC,SAAA,UACAC,QAEAzE,EAAAsE,YAAAI,aAAAb,EAAAV,IAAAY,EAAAZ,KAEAnD,EAAAsE,YAAAI,aAAAlB,EAAAN,WAAAV,EAAAU,YAEAlD,EAAAsE,YAAAI,aAAAlC,EAAAW,IAAAc,EAAAd,OAEA,SAAAkB,EAAAjC,GACA,OAAAnC,EAAA0E,wBAAApB,EAAAnB,EAAAoC,WA3BAI,CAAAxC,IAAAG,KAAAC,EAAA7B,EAAA4C,QA+BA,IAAAd,EA5BA,OAAA1C,EAAAmC,aAAAE,EAAAD,KAXA3C,EAAAU","file":"static/js/146.b18e3023.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar utils = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar utils_1 = require(\"../language/utils\");\nvar OPTION_MULTILINE = \"multiline\";\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = function (isObjectLiteral) {\n        var start = \"This arrow function body can be simplified by omitting the curly braces and the keyword 'return'\";\n        return start + (isObjectLiteral ? \", and wrapping the object literal in parentheses.\" : \".\");\n    };\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk, { multiline: this.ruleArguments.indexOf(OPTION_MULTILINE) !== -1 });\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"arrow-return-shorthand\",\n        description: \"Suggests to convert `() => { return x; }` to `() => x`.\",\n        hasFix: true,\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            If `\", \"` is specified, then this will warn even if the function spans multiple lines.\"], [\"\\n            If \\\\`\", \"\\\\` is specified, then this will warn even if the function spans multiple lines.\"])), OPTION_MULTILINE),\n        options: {\n            type: \"string\",\n            enum: [OPTION_MULTILINE],\n        },\n        optionExamples: [\n            true,\n            [true, OPTION_MULTILINE],\n        ],\n        rationale: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            It's unnecessary to include `return` and `{}` brackets in arrow lambdas.\\n            Leaving them out results in simpler and easier to read code.\\n        \"], [\"\\n            It's unnecessary to include \\\\`return\\\\` and \\\\`{}\\\\` brackets in arrow lambdas.\\n            Leaving them out results in simpler and easier to read code.\\n        \"]))),\n        type: \"style\",\n        typescriptOnly: false,\n    };\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    var sourceFile = ctx.sourceFile, multiline = ctx.options.multiline;\n    return ts.forEachChild(sourceFile, function cb(node) {\n        if (utils.isArrowFunction(node) && utils.isBlock(node.body)) {\n            var expr = getSimpleReturnExpression(node.body);\n            if (expr !== undefined && (multiline || utils.isSameLine(sourceFile, node.body.getStart(sourceFile), node.body.end))) {\n                var isObjectLiteral = expr.kind === ts.SyntaxKind.ObjectLiteralExpression;\n                ctx.addFailureAtNode(node.body, Rule.FAILURE_STRING(isObjectLiteral), createFix(node, node.body, expr, sourceFile.text));\n            }\n        }\n        return ts.forEachChild(node, cb);\n    });\n}\nfunction createFix(arrowFunction, body, expr, text) {\n    var statement = expr.parent;\n    var returnKeyword = utils.getChildOfKind(statement, ts.SyntaxKind.ReturnKeyword);\n    var arrow = utils.getChildOfKind(arrowFunction, ts.SyntaxKind.EqualsGreaterThanToken);\n    var openBrace = utils.getChildOfKind(body, ts.SyntaxKind.OpenBraceToken);\n    var closeBrace = utils.getChildOfKind(body, ts.SyntaxKind.CloseBraceToken);\n    var semicolon = utils.getChildOfKind(statement, ts.SyntaxKind.SemicolonToken);\n    var anyComments = hasComments(arrow) || hasComments(openBrace) || hasComments(statement) || hasComments(returnKeyword) ||\n        hasComments(expr) || (semicolon !== undefined && hasComments(semicolon)) || hasComments(closeBrace);\n    return anyComments ? undefined : (expr.kind === ts.SyntaxKind.ObjectLiteralExpression ? [\n        Lint.Replacement.appendText(expr.getStart(), \"(\"),\n        Lint.Replacement.appendText(expr.getEnd(), \")\"),\n    ] : []).concat([\n        // \" {\"\n        Lint.Replacement.deleteFromTo(arrow.end, openBrace.end),\n        // \"return \"\n        Lint.Replacement.deleteFromTo(statement.getStart(), expr.getStart()),\n        // \" }\" (may include semicolon)\n        Lint.Replacement.deleteFromTo(expr.end, closeBrace.end),\n    ]);\n    function hasComments(node) {\n        return utils_1.hasCommentAfterPosition(text, node.getEnd());\n    }\n}\n/** Given `{ return x; }`, return `x`. */\nfunction getSimpleReturnExpression(block) {\n    return block.statements.length === 1 && block.statements[0].kind === ts.SyntaxKind.ReturnStatement\n        ? block.statements[0].expression\n        : undefined;\n}\nvar templateObject_1, templateObject_2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/arrowReturnShorthandRule.js\n// module id = 2013\n// module chunks = 146"],"sourceRoot":""}