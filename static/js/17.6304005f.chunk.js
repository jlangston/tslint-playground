webpackJsonp([17],{2148:function(e,n,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var t,i=a(1),o=a(842),s=a(55),r=a(1116),u=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return i.__extends(n,e),n.prototype.apply=function(e){return this.applyWithFunction(e,c)},n.metadata={ruleName:"use-isnan",description:"Enforces use of the `isNaN()` function to check for NaN references instead of a comparison to the `NaN` constant.",rationale:r.Utils.dedent(t||(t=i.__makeTemplateObject(["\n            Since `NaN !== NaN`, comparisons with regular operators will produce unexpected results.\n            So, instead of `if (myVar === NaN)`, do `if (isNaN(myVar))`."],["\n            Since \\`NaN !== NaN\\`, comparisons with regular operators will produce unexpected results.\n            So, instead of \\`if (myVar === NaN)\\`, do \\`if (isNaN(myVar))\\`."]))),optionsDescription:"Not configurable.",options:null,optionExamples:[!0],type:"functionality",typescriptOnly:!1},n.FAILURE_STRING="Found an invalid comparison for NaN: ",n}(r.Rules.AbstractRule);function c(e){return s.forEachChild(e.sourceFile,function n(a){if(o.isBinaryExpression(a))switch(a.operatorToken.kind){case s.SyntaxKind.LessThanToken:case s.SyntaxKind.GreaterThanToken:case s.SyntaxKind.LessThanEqualsToken:case s.SyntaxKind.GreaterThanEqualsToken:case s.SyntaxKind.EqualsEqualsToken:case s.SyntaxKind.ExclamationEqualsToken:case s.SyntaxKind.EqualsEqualsEqualsToken:case s.SyntaxKind.ExclamationEqualsEqualsToken:(l(a.right)||l(a.left))&&e.addFailureAtNode(a,u.FAILURE_STRING+a.getText(e.sourceFile))}return s.forEachChild(a,n)})}function l(e){return e.kind===s.SyntaxKind.Identifier&&"NaN"===e.text}n.Rule=u}});
//# sourceMappingURL=17.6304005f.chunk.js.map