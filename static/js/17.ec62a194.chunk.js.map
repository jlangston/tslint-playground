{"version":3,"sources":["../node_modules/tslint/lib/rules/useIsnanRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","metadata","ruleName","description","rationale","Utils","dedent","__makeTemplateObject","optionsDescription","options","optionExamples","type","typescriptOnly","FAILURE_STRING","Rules","AbstractRule","ctx","forEachChild","cb","node","isBinaryExpression","operatorToken","kind","SyntaxKind","LessThanToken","GreaterThanToken","LessThanEqualsToken","GreaterThanEqualsToken","EqualsEqualsToken","ExclamationEqualsToken","EqualsEqualsEqualsToken","ExclamationEqualsEqualsToken","isExpressionNaN","right","left","addFailureAtNode","getText","Identifier","text"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAmDAC,EAnDAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAkBA,OApBAR,EAAAU,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,kBAAAD,EAAAE,IAGAT,EAAAU,UACAC,SAAA,YACAC,YAAA,oHACAC,UAAAd,EAAAe,MAAAC,OAAArB,MAAAC,EAAAqB,sBAAA,wXACAC,mBAAA,oBACAC,QAAA,KACAC,iBAAA,GACAC,KAAA,gBACAC,gBAAA,GAGArB,EAAAsB,eAAA,wCACAtB,EArBA,CAsBCD,EAAAwB,MAAAC,cAED,SAAAf,EAAAgB,GACA,OAAA3B,EAAA4B,aAAAD,EAAAlB,WAAA,SAAAoB,EAAAC,GACA,GAAA/B,EAAAgC,mBAAAD,GACA,OAAAA,EAAAE,cAAAC,MACA,KAAAjC,EAAAkC,WAAAC,cACA,KAAAnC,EAAAkC,WAAAE,iBACA,KAAApC,EAAAkC,WAAAG,oBACA,KAAArC,EAAAkC,WAAAI,uBACA,KAAAtC,EAAAkC,WAAAK,kBACA,KAAAvC,EAAAkC,WAAAM,uBACA,KAAAxC,EAAAkC,WAAAO,wBACA,KAAAzC,EAAAkC,WAAAQ,8BACAC,EAAAb,EAAAc,QAAAD,EAAAb,EAAAe,QACAlB,EAAAmB,iBAAAhB,EAAA5B,EAAAsB,eAAAM,EAAAiB,QAAApB,EAAAlB,aAIA,OAAAT,EAAA4B,aAAAE,EAAAD,KAGA,SAAAc,EAAAb,GACA,OAAAA,EAAAG,OAAAjC,EAAAkC,WAAAc,YAAA,QAAAlB,EAAAmB,KAtBAvD,EAAAQ","file":"static/js/17.ec62a194.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk);\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"use-isnan\",\n        description: \"Enforces use of the `isNaN()` function to check for NaN references instead of a comparison to the `NaN` constant.\",\n        rationale: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Since `NaN !== NaN`, comparisons with regular operators will produce unexpected results.\\n            So, instead of `if (myVar === NaN)`, do `if (isNaN(myVar))`.\"], [\"\\n            Since \\\\`NaN !== NaN\\\\`, comparisons with regular operators will produce unexpected results.\\n            So, instead of \\\\`if (myVar === NaN)\\\\`, do \\\\`if (isNaN(myVar))\\\\`.\"]))),\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        type: \"functionality\",\n        typescriptOnly: false,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"Found an invalid comparison for NaN: \";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    return ts.forEachChild(ctx.sourceFile, function cb(node) {\n        if (tsutils_1.isBinaryExpression(node)) {\n            switch (node.operatorToken.kind) {\n                case ts.SyntaxKind.LessThanToken:\n                case ts.SyntaxKind.GreaterThanToken:\n                case ts.SyntaxKind.LessThanEqualsToken:\n                case ts.SyntaxKind.GreaterThanEqualsToken:\n                case ts.SyntaxKind.EqualsEqualsToken:\n                case ts.SyntaxKind.ExclamationEqualsToken:\n                case ts.SyntaxKind.EqualsEqualsEqualsToken:\n                case ts.SyntaxKind.ExclamationEqualsEqualsToken:\n                    if (isExpressionNaN(node.right) || isExpressionNaN(node.left)) {\n                        ctx.addFailureAtNode(node, Rule.FAILURE_STRING + node.getText(ctx.sourceFile));\n                    }\n            }\n        }\n        return ts.forEachChild(node, cb);\n    });\n}\nfunction isExpressionNaN(node) {\n    return node.kind === ts.SyntaxKind.Identifier && node.text === \"NaN\";\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/useIsnanRule.js\n// module id = 2149\n// module chunks = 17"],"sourceRoot":""}