{"version":3,"sources":["../node_modules/tslint/lib/rules/quotemarkRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","tslib_1","__webpack_require__","tsutils_1","ts","Lint","OPTION_SINGLE","OPTION_DOUBLE","Rule","_super","apply","this","arguments","__extends","FAILURE_STRING","actual","expected","prototype","sourceFile","args","ruleArguments","quoteMark","_i","args_1","length","arg","getQuotemarkPreference","applyWithFunction","walk","avoidEscape","hasArg","avoidTemplate","jsxQuoteMark","name","indexOf","metadata","ruleName","description","hasFix","optionsDescription","Utils","dedent","__makeTemplateObject","options","type","items","enum","minLength","maxLength","optionExamples","typescriptOnly","Rules","AbstractRule","ctx","forEachChild","cb","node","isStringLiteral","isNoSubstitutionTemplateLiteral","parent","kind","SyntaxKind","TaggedTemplateExpression","isSameLine","getStart","end","expectedQuoteMark","JsxAttribute","actualQuoteMark","text","fixQuoteMark","needsQuoteEscapes","includes","StringLiteral","start","substring","replace","RegExp","addFailure","Replacement"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAsGAC,EAtGAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAA,SACAC,EAAA,SAKAC,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAyCA,OA3CAV,EAAAY,UAAAL,EAAAC,GAKAD,EAAAM,eAAA,SAAAC,EAAAC,GACA,OAAAD,EAAA,cAAAC,GAEAR,EAAAS,UAAAP,MAAA,SAAAQ,GACA,IAAAC,EAAAR,KAAAS,cACAC,EAwEA,SAAAF,GACA,QAAAG,EAAA,EAAAC,EAAAJ,EAAmCG,EAAAC,EAAAC,OAAoBF,IAAA,CACvD,IAAAG,EAAAF,EAAAD,GACA,GAAAG,IAAAnB,GAAAmB,IAAAlB,EACA,OAAAkB,EAGA,OA/EAC,CAAAP,KAAAb,EAAA,QACA,OAAAK,KAAAgB,kBAAAT,EAAAU,GACAC,YAAAC,EAdA,gBAeAC,cAAAD,EAhBA,kBAiBAE,aAAAF,EAnBA,cAmBA,IAAAA,EAlBA,cAkBA,IAAAT,EACAA,cAEA,SAAAS,EAAAG,GACA,WAAAd,EAAAe,QAAAD,KAIAzB,EAAA2B,UACAC,SAAA,YACAC,YAAA,wDACAC,QAAA,EACAC,mBAAAlC,EAAAmC,MAAAC,OAAAzC,MAAAC,EAAAyC,sBAAA,izCAAApC,EAAAC,EA/BA,aACA,aACA,iBACA,eA4BAA,EA5BA,gBA6BAoC,SACAC,KAAA,QACAC,OACAD,KAAA,SACAE,MAAAxC,EAAAC,EApCA,aACA,aAEA,eADA,mBAoCAwC,UAAA,EACAC,UAAA,GAEAC,kBACA,EAAA3C,EAvCA,eADA,oBAyCA,EAAAA,EA1CA,eA4CAsC,KAAA,QACAM,gBAAA,GAEA1C,EA5CA,CA6CCH,EAAA8C,MAAAC,cAED,SAAAxB,EAAAyB,GACA,IAAAnC,EAAAmC,EAAAnC,WAAAyB,EAAAU,EAAAV,QACAvC,EAAAkD,aAAApC,EAAA,SAAAqC,EAAAC,GACA,GAAArD,EAAAsD,gBAAAD,IACAb,EAAAZ,eAAA5B,EAAAuD,gCAAAF,IACAA,EAAAG,OAAAC,OAAAxD,EAAAyD,WAAAC,0BACA3D,EAAA4D,WAAA7C,EAAAsC,EAAAQ,SAAA9C,GAAAsC,EAAAS,KAAA,CACA,IAAAC,EAAAV,EAAAG,OAAAC,OAAAxD,EAAAyD,WAAAM,aAAAxB,EAAAX,aAAAW,EAAAtB,UACA+C,EAAAlD,EAAAmD,KAAAb,EAAAS,IAAA,GACA,GAAAG,IAAAF,EACA,OAEA,IAAAI,EAAAJ,EACAK,EAAAf,EAAAa,KAAAG,SAAAN,GACA,GAAAK,GAAA5B,EAAAd,YAAA,CACA,GAAA2B,EAAAI,OAAAxD,EAAAyD,WAAAY,cACA,OAKA,GADAH,EAAA,MAAAJ,EAAA,QACAV,EAAAa,KAAAG,SAAAF,GACA,OAGA,IAAAI,EAAAlB,EAAAQ,SAAA9C,GACAmD,EAAAnD,EAAAmD,KAAAM,UAAAD,EAAA,EAAAlB,EAAAS,IAAA,GAKA,OAJAM,IACAF,IAAAO,QAAA,IAAAC,OAAAP,EAAA,UAAAA,IAEAD,IAAAO,QAAA,IAAAC,OAAA,OAAAT,EAAA,KAAAA,GACAf,EAAAyB,WAAAJ,EAAAlB,EAAAS,IAAAzD,EAAAM,eAAAsD,EAAAE,GAAA,IAAAjE,EAAA0E,YAAAL,EAAAlB,EAAAS,IAAAS,EAAAJ,EAAAD,EAAAC,IAEAlE,EAAAkD,aAAAE,EAAAD,KAlCAzD,EAAAU","file":"static/js/35.aa584440.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar OPTION_SINGLE = \"single\";\nvar OPTION_DOUBLE = \"double\";\nvar OPTION_JSX_SINGLE = \"jsx-single\";\nvar OPTION_JSX_DOUBLE = \"jsx-double\";\nvar OPTION_AVOID_TEMPLATE = \"avoid-template\";\nvar OPTION_AVOID_ESCAPE = \"avoid-escape\";\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = function (actual, expected) {\n        return actual + \" should be \" + expected;\n    };\n    Rule.prototype.apply = function (sourceFile) {\n        var args = this.ruleArguments;\n        var quoteMark = getQuotemarkPreference(args) === OPTION_SINGLE ? \"'\" : '\"';\n        return this.applyWithFunction(sourceFile, walk, {\n            avoidEscape: hasArg(OPTION_AVOID_ESCAPE),\n            avoidTemplate: hasArg(OPTION_AVOID_TEMPLATE),\n            jsxQuoteMark: hasArg(OPTION_JSX_SINGLE) ? \"'\" : hasArg(OPTION_JSX_DOUBLE) ? '\"' : quoteMark,\n            quoteMark: quoteMark,\n        });\n        function hasArg(name) {\n            return args.indexOf(name) !== -1;\n        }\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"quotemark\",\n        description: \"Requires single or double quotes for string literals.\",\n        hasFix: true,\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Five arguments may be optionally provided:\\n\\n            * `\\\"\", \"\\\"` enforces single quotes.\\n            * `\\\"\", \"\\\"` enforces double quotes.\\n            * `\\\"\", \"\\\"` enforces single quotes for JSX attributes.\\n            * `\\\"\", \"\\\"` enforces double quotes for JSX attributes.\\n            * `\\\"\", \"\\\"` forbids single-line untagged template strings that do not contain string interpolations.\\n            * `\\\"\", \"\\\"` allows you to use the \\\"other\\\" quotemark in cases where escaping would normally be required.\\n            For example, `[true, \\\"\", \"\\\", \\\"\", \"\\\"]` would not report a failure on the string literal\\n            `'Hello \\\"World\\\"'`.\"], [\"\\n            Five arguments may be optionally provided:\\n\\n            * \\\\`\\\"\", \"\\\"\\\\` enforces single quotes.\\n            * \\\\`\\\"\", \"\\\"\\\\` enforces double quotes.\\n            * \\\\`\\\"\", \"\\\"\\\\` enforces single quotes for JSX attributes.\\n            * \\\\`\\\"\", \"\\\"\\\\` enforces double quotes for JSX attributes.\\n            * \\\\`\\\"\", \"\\\"\\\\` forbids single-line untagged template strings that do not contain string interpolations.\\n            * \\\\`\\\"\", \"\\\"\\\\` allows you to use the \\\"other\\\" quotemark in cases where escaping would normally be required.\\n            For example, \\\\`[true, \\\"\", \"\\\", \\\"\", \"\\\"]\\\\` would not report a failure on the string literal\\n            \\\\`'Hello \\\"World\\\"'\\\\`.\"])), OPTION_SINGLE, OPTION_DOUBLE, OPTION_JSX_SINGLE, OPTION_JSX_DOUBLE, OPTION_AVOID_TEMPLATE, OPTION_AVOID_ESCAPE, OPTION_DOUBLE, OPTION_AVOID_ESCAPE),\n        options: {\n            type: \"array\",\n            items: {\n                type: \"string\",\n                enum: [OPTION_SINGLE, OPTION_DOUBLE, OPTION_JSX_SINGLE, OPTION_JSX_DOUBLE, OPTION_AVOID_ESCAPE, OPTION_AVOID_TEMPLATE],\n            },\n            minLength: 0,\n            maxLength: 5,\n        },\n        optionExamples: [\n            [true, OPTION_SINGLE, OPTION_AVOID_ESCAPE, OPTION_AVOID_TEMPLATE],\n            [true, OPTION_SINGLE, OPTION_JSX_DOUBLE],\n        ],\n        type: \"style\",\n        typescriptOnly: false,\n    };\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    var sourceFile = ctx.sourceFile, options = ctx.options;\n    ts.forEachChild(sourceFile, function cb(node) {\n        if (tsutils_1.isStringLiteral(node)\n            || options.avoidTemplate && tsutils_1.isNoSubstitutionTemplateLiteral(node)\n                && node.parent.kind !== ts.SyntaxKind.TaggedTemplateExpression\n                && tsutils_1.isSameLine(sourceFile, node.getStart(sourceFile), node.end)) {\n            var expectedQuoteMark = node.parent.kind === ts.SyntaxKind.JsxAttribute ? options.jsxQuoteMark : options.quoteMark;\n            var actualQuoteMark = sourceFile.text[node.end - 1];\n            if (actualQuoteMark === expectedQuoteMark) {\n                return;\n            }\n            var fixQuoteMark = expectedQuoteMark;\n            var needsQuoteEscapes = node.text.includes(expectedQuoteMark);\n            if (needsQuoteEscapes && options.avoidEscape) {\n                if (node.kind === ts.SyntaxKind.StringLiteral) {\n                    return;\n                }\n                // If expecting double quotes, fix a template `a \"quote\"` to `a 'quote'` anyway,\n                // always preferring *some* quote mark over a template.\n                fixQuoteMark = expectedQuoteMark === '\"' ? \"'\" : '\"';\n                if (node.text.includes(fixQuoteMark)) {\n                    return;\n                }\n            }\n            var start = node.getStart(sourceFile);\n            var text = sourceFile.text.substring(start + 1, node.end - 1);\n            if (needsQuoteEscapes) {\n                text = text.replace(new RegExp(fixQuoteMark, \"g\"), \"\\\\\" + fixQuoteMark);\n            }\n            text = text.replace(new RegExp(\"\\\\\\\\\" + actualQuoteMark, \"g\"), actualQuoteMark);\n            return ctx.addFailure(start, node.end, Rule.FAILURE_STRING(actualQuoteMark, fixQuoteMark), new Lint.Replacement(start, node.end - start, fixQuoteMark + text + fixQuoteMark));\n        }\n        ts.forEachChild(node, cb);\n    });\n}\nfunction getQuotemarkPreference(args) {\n    for (var _i = 0, args_1 = args; _i < args_1.length; _i++) {\n        var arg = args_1[_i];\n        if (arg === OPTION_SINGLE || arg === OPTION_DOUBLE) {\n            return arg;\n        }\n    }\n    return undefined;\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/quotemarkRule.js\n// module id = 2130\n// module chunks = 35"],"sourceRoot":""}