{"version":3,"sources":["../node_modules/tslint/lib/rules/noReturnAwaitRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","metadata","ruleName","description","rationale","Utils","dedent","__makeTemplateObject","optionsDescription","options","optionExamples","type","typescriptOnly","hasFix","FAILURE_STRING","Rules","AbstractRule","ctx","forEachChild","cb","node","kind","SyntaxKind","AwaitExpression","parent","outer","ArrowFunction","ReturnStatement","isInsideTryBlock","ParenthesizedExpression","ConditionalExpression","condition","BinaryExpression","right","operatorToken","AmpersandAmpersandToken","BarBarToken","CommaToken","isUnnecessaryAwait","expression","keywordStart","pos","length","addFailure","Replacement","deleteFromTo","getStart","undefined","isFunctionScopeBoundary","isTryStatement","tryBlock","finallyBlock","catchClause"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IA2FAC,EA3FAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAmBA,OArBAR,EAAAU,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,kBAAAD,EAAAE,IAGAT,EAAAU,UACAC,SAAA,kBACAC,YAAA,wCACAC,UAAAd,EAAAe,MAAAC,OAAArB,MAAAC,EAAAqB,sBAAA,gcACAC,mBAAA,oBACAC,QAAA,KACAC,iBAAA,GACAC,KAAA,gBACAC,gBAAA,EACAC,QAAA,GAGAtB,EAAAuB,eAAA,uBACAvB,EAtBA,CAuBCD,EAAAyB,MAAAC,cAED,SAAAhB,EAAAiB,GACA,OAAA5B,EAAA6B,aAAAD,EAAAnB,WAAA,SAAAqB,EAAAC,GACA,GAAAA,EAAAC,OAAAhC,EAAAiC,WAAAC,iBAQA,SAAAH,GACA,QACA,IAAAI,EAAAJ,EAAAI,OACAC,EAAA,OAAAD,EAAAH,MACA,KAAAhC,EAAAiC,WAAAI,cACA,SACA,KAAArC,EAAAiC,WAAAK,gBACA,OAAAC,EAAAJ,UACA,KAAAnC,EAAAiC,WAAAO,wBACA,MACA,KAAAxC,EAAAiC,WAAAQ,sBACA,GAAAN,EAAAO,YAAAX,EACA,SAEA,MACA,KAAA/B,EAAAiC,WAAAU,iBACA,GAAAR,EAAAS,QAAAb,EACA,OAAAI,EAAAU,cAAAb,MACA,KAAAhC,EAAAiC,WAAAa,wBACA,KAAA9C,EAAAiC,WAAAc,YACA,KAAA/C,EAAAiC,WAAAe,WACA,MAAAZ,EAGA,SACA,QACA,SAEAL,EAAAI,GApCAc,CAAAlB,GAAA,CACA,IAAAmB,EAAAnB,EAAAmB,WACAC,EAAAD,EAAAE,IAAA,QAAAC,OACAzB,EAAA0B,WAAAH,EAAAD,EAAAE,IAAAlD,EAAAuB,eAAAxB,EAAAsD,YAAAC,aAAAL,EAAAD,EAAAO,SAAA7B,EAAAnB,cAEA,OAAAT,EAAA6B,aAAAE,EAAAD,KAkCA,SAAAS,EAAAR,GACA,UAAA2B,IAAA3B,EAAAI,QAAA,CACA,GAAApC,EAAA4D,wBAAA5B,GACA,SAEA,GAAAhC,EAAA6D,eAAA7B,EAAAI,QAAA,CACA,GAEAJ,EAAAI,OAAA0B,WAAA9B,QAEA2B,IAAA3B,EAAAI,OAAA2B,cAAA/B,EAAAI,OAAA4B,cAAAhC,EACA,SAEAA,IAAAI,mBAGAJ,IAAAI,OAGA,SA7DAzC,EAAAQ","file":"static/js/72.63d5f9d0.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk);\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"no-return-await\",\n        description: \"Disallows unnecessary `return await`.\",\n        rationale: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            An async function always wraps the return value in a Promise.\\n            Using `return await` just adds extra time before the overreaching promise is resolved without changing the semantics.\\n        \"], [\"\\n            An async function always wraps the return value in a Promise.\\n            Using \\\\`return await\\\\` just adds extra time before the overreaching promise is resolved without changing the semantics.\\n        \"]))),\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        type: \"functionality\",\n        typescriptOnly: false,\n        hasFix: true,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"Unnecessary 'await'.\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    return ts.forEachChild(ctx.sourceFile, function cb(node) {\n        if (node.kind === ts.SyntaxKind.AwaitExpression && isUnnecessaryAwait(node)) {\n            var expression = node.expression;\n            var keywordStart = expression.pos - \"await\".length;\n            ctx.addFailure(keywordStart, expression.pos, Rule.FAILURE_STRING, Lint.Replacement.deleteFromTo(keywordStart, expression.getStart(ctx.sourceFile)));\n        }\n        return ts.forEachChild(node, cb);\n    });\n}\nfunction isUnnecessaryAwait(node) {\n    while (true) {\n        var parent = node.parent;\n        outer: switch (parent.kind) {\n            case ts.SyntaxKind.ArrowFunction:\n                return true;\n            case ts.SyntaxKind.ReturnStatement:\n                return !isInsideTryBlock(parent.parent);\n            case ts.SyntaxKind.ParenthesizedExpression:\n                break;\n            case ts.SyntaxKind.ConditionalExpression:\n                if (parent.condition === node) {\n                    return false;\n                }\n                break;\n            case ts.SyntaxKind.BinaryExpression:\n                if (parent.right === node) {\n                    switch (parent.operatorToken.kind) {\n                        case ts.SyntaxKind.AmpersandAmpersandToken:\n                        case ts.SyntaxKind.BarBarToken:\n                        case ts.SyntaxKind.CommaToken:\n                            break outer;\n                    }\n                }\n                return false;\n            default:\n                return false;\n        }\n        node = parent;\n    }\n}\nfunction isInsideTryBlock(node) {\n    while (node.parent !== undefined) {\n        if (tsutils_1.isFunctionScopeBoundary(node)) {\n            return false;\n        }\n        if (tsutils_1.isTryStatement(node.parent)) {\n            if (\n            // statements inside the try block always have an error handler, either catch or finally\n            node.parent.tryBlock === node ||\n                // statement inside the catch block only have an error handler if there is a finally block\n                node.parent.finallyBlock !== undefined && node.parent.catchClause === node) {\n                return true;\n            }\n            node = node.parent.parent;\n        }\n        else {\n            node = node.parent;\n        }\n    }\n    return false;\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/noReturnAwaitRule.js\n// module id = 2087\n// module chunks = 72"],"sourceRoot":""}