{"version":3,"sources":["../node_modules/tslint/lib/rules/classNameRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","tslib_1","__webpack_require__","tsutils_1","ts","Lint","utils_1","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","metadata","ruleName","description","rationale","Utils","dedent","__makeTemplateObject","optionsDescription","options","optionExamples","type","typescriptOnly","FAILURE_STRING","Rules","AbstractRule","ctx","forEachChild","cb","node","isClassLikeDeclaration","undefined","name","isInterfaceDeclaration","isPascalCased","text","addFailureAtNode"],"mappings":"sDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAwCAC,EAxCAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAAJ,EAAA,IACAK,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAkBA,OApBAT,EAAAW,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,kBAAAD,EAAAE,IAGAT,EAAAU,UACAC,SAAA,aACAC,YAAA,kDACAC,UAAAf,EAAAgB,MAAAC,OAAAtB,MAAAC,EAAAsB,sBAAA,4jBACAC,mBAAA,oBACAC,QAAA,KACAC,iBAAA,GACAC,KAAA,QACAC,gBAAA,GAGArB,EAAAsB,eAAA,oCACAtB,EArBA,CAsBCF,EAAAyB,MAAAC,cAED,SAAAf,EAAAgB,GACA,OAAA5B,EAAA6B,aAAAD,EAAAlB,WAAA,SAAAoB,EAAAC,GAOA,OANAhC,EAAAiC,uBAAAD,SAAAE,IAAAF,EAAAG,MACAnC,EAAAoC,uBAAAJ,MACA7B,EAAAkC,cAAAL,EAAAG,KAAAG,OACAT,EAAAU,iBAAAP,EAAAG,KAAA/B,EAAAsB,iBAGAzB,EAAA6B,aAAAE,EAAAD,KATApC,EAAAS","file":"static/js/139.10968ee7.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar utils_1 = require(\"../utils\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk);\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"class-name\",\n        description: \"Enforces PascalCased class and interface names.\",\n        rationale: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Makes it easy to differentiate classes from regular variables at a glance.\\n\\n            JavaScript and general programming convention is to refer to classes in PascalCase.\\n            It's confusing to use camelCase or other conventions for class names.\\n        \"], [\"\\n            Makes it easy to differentiate classes from regular variables at a glance.\\n\\n            JavaScript and general programming convention is to refer to classes in PascalCase.\\n            It's confusing to use camelCase or other conventions for class names.\\n        \"]))),\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        type: \"style\",\n        typescriptOnly: false,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"Class name must be in pascal case\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    return ts.forEachChild(ctx.sourceFile, function cb(node) {\n        if (tsutils_1.isClassLikeDeclaration(node) && node.name !== undefined ||\n            tsutils_1.isInterfaceDeclaration(node)) {\n            if (!utils_1.isPascalCased(node.name.text)) {\n                ctx.addFailureAtNode(node.name, Rule.FAILURE_STRING);\n            }\n        }\n        return ts.forEachChild(node, cb);\n    });\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/classNameRule.js\n// module id = 2020\n// module chunks = 139"],"sourceRoot":""}