{"version":3,"sources":["../node_modules/tslint/lib/rules/fileNameCasingRule.js"],"names":["Object","defineProperty","exports","value","Casing","tslib_1","__webpack_require__","path","Lint","utils_1","templateObject_1","Rule","_super","apply","this","arguments","__extends","FAILURE_STRING","expectedCasing","stylizedNameForCasing","casing","CamelCase","PascalCase","KebabCase","isCorrectCasing","fileName","isCamelCased","isPascalCased","isKebabCased","prototype","sourceFile","ruleArguments","length","parse","name","RuleFailure","ruleName","metadata","description","rationale","optionsDescription","Utils","dedent","__makeTemplateObject","options","type","items","enum","optionExamples","hasFix","typescriptOnly","Rules","AbstractRule"],"mappings":"sDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAIAC,EAJAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,IACAE,EAAAF,EAAA,MACAG,EAAAH,EAAA,KAEA,SAAAF,GACAA,EAAA,uBACAA,EAAA,yBACAA,EAAA,uBAHA,CAICA,WACD,IAmEAM,EAnEAC,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KA6DA,OA/DAT,EAAAW,UAAAL,EAAAC,GAKAD,EAAAM,eAAA,SAAAC,GACA,2BAAAP,EAAAQ,sBAAAD,IAEAP,EAAAQ,sBAAA,SAAAC,GACA,OAAAA,GACA,KAAAhB,EAAAiB,UACA,kBACA,KAAAjB,EAAAkB,WACA,mBACA,KAAAlB,EAAAmB,UACA,qBAGAZ,EAAAa,gBAAA,SAAAC,EAAAL,GACA,OAAAA,GACA,KAAAhB,EAAAiB,UACA,OAAAZ,EAAAiB,aAAAD,GACA,KAAArB,EAAAkB,WACA,OAAAb,EAAAkB,cAAAF,GACA,KAAArB,EAAAmB,UACA,OAAAd,EAAAmB,aAAAH,KAGAd,EAAAkB,UAAAhB,MAAA,SAAAiB,GACA,OAAAhB,KAAAiB,cAAAC,OACA,SAEA,IAAAZ,EAAAN,KAAAiB,cAAA,GACAN,EAAAlB,EAAA0B,MAAAH,EAAAL,UAAAS,KACA,OAAAvB,EAAAa,gBAAAC,EAAAL,OACA,IAAAZ,EAAA2B,YAAAL,EAAA,IAAAnB,EAAAM,eAAAG,GAAAN,KAAAsB,YAKAzB,EAAA0B,UACAD,SAAA,mBACAE,YAAA,+CACAC,UAAA,4DACAC,mBAAAhC,EAAAiC,MAAAC,OAAAhC,MAAAL,EAAAsC,sBAAA,qkBAAAvC,EAAAiB,UAAAjB,EAAAkB,WAAAlB,EAAAmB,WACAqB,SACAC,KAAA,QACAC,QAEAD,KAAA,SACAE,MAAA3C,EAAAiB,UAAAjB,EAAAkB,WAAAlB,EAAAmB,cAIAyB,kBACA,EAAA5C,EAAAiB,aACA,EAAAjB,EAAAkB,cACA,EAAAlB,EAAAmB,YAEA0B,QAAA,EACAJ,KAAA,QACAK,gBAAA,GAEAvC,EAhEA,CAiECH,EAAA2C,MAAAC,cACDlD,EAAAS","file":"static/js/132.f08f7ff9.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2018 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar path = require(\"path\");\nvar Lint = require(\"../index\");\nvar utils_1 = require(\"../utils\");\nvar Casing;\n(function (Casing) {\n    Casing[\"CamelCase\"] = \"camel-case\";\n    Casing[\"PascalCase\"] = \"pascal-case\";\n    Casing[\"KebabCase\"] = \"kebab-case\";\n})(Casing || (Casing = {}));\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = function (expectedCasing) {\n        return \"File name must be \" + Rule.stylizedNameForCasing(expectedCasing);\n    };\n    Rule.stylizedNameForCasing = function (casing) {\n        switch (casing) {\n            case Casing.CamelCase:\n                return \"camelCase\";\n            case Casing.PascalCase:\n                return \"PascalCase\";\n            case Casing.KebabCase:\n                return \"kebab-case\";\n        }\n    };\n    Rule.isCorrectCasing = function (fileName, casing) {\n        switch (casing) {\n            case Casing.CamelCase:\n                return utils_1.isCamelCased(fileName);\n            case Casing.PascalCase:\n                return utils_1.isPascalCased(fileName);\n            case Casing.KebabCase:\n                return utils_1.isKebabCased(fileName);\n        }\n    };\n    Rule.prototype.apply = function (sourceFile) {\n        if (this.ruleArguments.length !== 1) {\n            return [];\n        }\n        var casing = this.ruleArguments[0];\n        var fileName = path.parse(sourceFile.fileName).name;\n        if (!Rule.isCorrectCasing(fileName, casing)) {\n            return [new Lint.RuleFailure(sourceFile, 0, 0, Rule.FAILURE_STRING(casing), this.ruleName)];\n        }\n        return [];\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"file-name-casing\",\n        description: \"Enforces a consistent file naming convention\",\n        rationale: \"Helps maintain a consistent style across a file hierarchy\",\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            One of the following arguments must be provided:\\n\\n            * `\", \"`: File names must be camel-cased: `fileName.ts`.\\n            * `\", \"`: File names must be Pascal-cased: `FileName.ts`.\\n            * `\", \"`: File names must be kebab-cased: `file-name.ts`.\"], [\"\\n            One of the following arguments must be provided:\\n\\n            * \\\\`\", \"\\\\`: File names must be camel-cased: \\\\`fileName.ts\\\\`.\\n            * \\\\`\", \"\\\\`: File names must be Pascal-cased: \\\\`FileName.ts\\\\`.\\n            * \\\\`\", \"\\\\`: File names must be kebab-cased: \\\\`file-name.ts\\\\`.\"])), Casing.CamelCase, Casing.PascalCase, Casing.KebabCase),\n        options: {\n            type: \"array\",\n            items: [\n                {\n                    type: \"string\",\n                    enum: [Casing.CamelCase, Casing.PascalCase, Casing.KebabCase],\n                },\n            ],\n        },\n        optionExamples: [\n            [true, Casing.CamelCase],\n            [true, Casing.PascalCase],\n            [true, Casing.KebabCase],\n        ],\n        hasFix: false,\n        type: \"style\",\n        typescriptOnly: false,\n    };\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/fileNameCasingRule.js\n// module id = 2027\n// module chunks = 132"],"sourceRoot":""}