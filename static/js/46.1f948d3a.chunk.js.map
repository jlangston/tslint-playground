{"version":3,"sources":["../node_modules/tslint/lib/rules/onlyArrowFunctionsRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","tslib_1","__webpack_require__","utils","ts","Lint","OPTION_ALLOW_DECLARATIONS","OPTION_ALLOW_NAMED_FUNCTIONS","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","ruleArguments","allowDeclarations","hasOption","allowNamedFunctions","name","indexOf","parseOptions","metadata","ruleName","description","rationale","optionsDescription","Utils","dedent","__makeTemplateObject","options","type","items","enum","minLength","maxLength","optionExamples","typescriptOnly","FAILURE_STRING","Rules","AbstractRule","ctx","_a","forEachChild","cb","node","kind","SyntaxKind","FunctionDeclaration","FunctionExpression","f","undefined","asteriskToken","parameters","length","isThisParameter","body","usesThis","functionIsExempt","addFailureAtNode","getChildOfKind","FunctionKeyword","ThisKeyword","hasOwnThisReference"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IA2EAC,EA3EAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAA,qBACAC,EAAA,wBACAC,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KA0BA,OA5BAV,EAAAY,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,kBAAAD,EAAAE,EA0BA,SAAAC,GACA,OACAC,kBAAAC,EAAAd,GACAe,oBAAAD,EAAAb,IAEA,SAAAa,EAAAE,GACA,WAAAJ,EAAAK,QAAAD,IAhCAE,CAAAb,KAAAO,iBAGAV,EAAAiB,UACAC,SAAA,uBACAC,YAAA,0DACAC,UAAA,+GACAC,mBAAAxB,EAAAyB,MAAAC,OAAA/B,MAAAC,EAAA+B,sBAAA,kOAA4U,mPAAuP1B,EAAAC,GACnkB0B,SACAC,KAAA,QACAC,OACAD,KAAA,SACAE,MAAA9B,EAAAC,IAEA8B,UAAA,EACAC,UAAA,GAEAC,iBAAA,MAAAjC,EAAAC,IACA2B,KAAA,aACAM,gBAAA,GAGAhC,EAAAiC,eAAA,oCACAjC,EA7BA,CA8BCH,EAAAqC,MAAAC,cAWD,SAAA1B,EAAA2B,GACA,IAAA7B,EAAA6B,EAAA7B,WAAA8B,EAAAD,EAAAX,QAAAd,EAAA0B,EAAA1B,kBAAAE,EAAAwB,EAAAxB,oBACA,OAAAjB,EAAA0C,aAAA/B,EAAA,SAAAgC,EAAAC,GACA,OAAAA,EAAAC,MACA,KAAA7C,EAAA8C,WAAAC,oBACA,GAAAhC,EACA,MAGA,KAAAf,EAAA8C,WAAAE,mBACA,IAAAC,EAAAL,EACA3B,QAAAiC,IAAAD,EAAA/B,MASA,SAAA0B,GACA,YAAAM,IAAAN,EAAAO,eACA,IAAAP,EAAAQ,WAAAC,QAAAtD,EAAAuD,gBAAAV,EAAAQ,WAAA,UACAF,IAAAN,EAAAW,OAAA,IAAAvD,EAAA0C,aAAAE,EAAAY,GAZAC,CAAAR,IACAT,EAAAkB,iBAAA3D,EAAA4D,eAAAf,EAAA5C,EAAA8C,WAAAc,gBAAApB,EAAA7B,YAAAP,EAAAiC,gBAIA,OAAArC,EAAA0C,aAAAE,EAAAD,KASA,SAAAa,EAAAZ,GACA,OAAAA,EAAAC,OAAA7C,EAAA8C,WAAAe,cAAA9D,EAAA+D,oBAAAlB,IAAA5C,EAAA0C,aAAAE,EAAAY,GApCA9D,EAAAU","file":"static/js/46.1f948d3a.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar utils = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar OPTION_ALLOW_DECLARATIONS = \"allow-declarations\";\nvar OPTION_ALLOW_NAMED_FUNCTIONS = \"allow-named-functions\";\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk, parseOptions(this.ruleArguments));\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"only-arrow-functions\",\n        description: \"Disallows traditional (non-arrow) function expressions.\",\n        rationale: \"Traditional functions don't bind lexical scope, which can lead to unexpected behavior when accessing 'this'.\",\n        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Two arguments may be optionally provided:\\n\\n            * `\\\"\", \"\\\"` allows standalone function declarations.\\n            * `\\\"\", \"\\\"` allows the expression `function foo() {}` but not `function() {}`.\\n        \"], [\"\\n            Two arguments may be optionally provided:\\n\\n            * \\\\`\\\"\", \"\\\"\\\\` allows standalone function declarations.\\n            * \\\\`\\\"\", \"\\\"\\\\` allows the expression \\\\`function foo() {}\\\\` but not \\\\`function() {}\\\\`.\\n        \"])), OPTION_ALLOW_DECLARATIONS, OPTION_ALLOW_NAMED_FUNCTIONS),\n        options: {\n            type: \"array\",\n            items: {\n                type: \"string\",\n                enum: [OPTION_ALLOW_DECLARATIONS, OPTION_ALLOW_NAMED_FUNCTIONS],\n            },\n            minLength: 0,\n            maxLength: 1,\n        },\n        optionExamples: [true, [true, OPTION_ALLOW_DECLARATIONS, OPTION_ALLOW_NAMED_FUNCTIONS]],\n        type: \"typescript\",\n        typescriptOnly: false,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = \"non-arrow functions are forbidden\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction parseOptions(ruleArguments) {\n    return {\n        allowDeclarations: hasOption(OPTION_ALLOW_DECLARATIONS),\n        allowNamedFunctions: hasOption(OPTION_ALLOW_NAMED_FUNCTIONS),\n    };\n    function hasOption(name) {\n        return ruleArguments.indexOf(name) !== -1;\n    }\n}\nfunction walk(ctx) {\n    var sourceFile = ctx.sourceFile, _a = ctx.options, allowDeclarations = _a.allowDeclarations, allowNamedFunctions = _a.allowNamedFunctions;\n    return ts.forEachChild(sourceFile, function cb(node) {\n        switch (node.kind) {\n            case ts.SyntaxKind.FunctionDeclaration:\n                if (allowDeclarations) {\n                    break;\n                }\n            // falls through\n            case ts.SyntaxKind.FunctionExpression: {\n                var f = node;\n                if (!(allowNamedFunctions && f.name !== undefined) && !functionIsExempt(f)) {\n                    ctx.addFailureAtNode(utils.getChildOfKind(node, ts.SyntaxKind.FunctionKeyword, ctx.sourceFile), Rule.FAILURE_STRING);\n                }\n            }\n        }\n        return ts.forEachChild(node, cb);\n    });\n}\n/** Generator functions and functions using `this` are allowed. */\nfunction functionIsExempt(node) {\n    return node.asteriskToken !== undefined ||\n        node.parameters.length !== 0 && utils.isThisParameter(node.parameters[0]) ||\n        node.body !== undefined && ts.forEachChild(node, usesThis) === true;\n}\nfunction usesThis(node) {\n    return node.kind === ts.SyntaxKind.ThisKeyword || !utils.hasOwnThisReference(node) && ts.forEachChild(node, usesThis);\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/onlyArrowFunctionsRule.js\n// module id = 2116\n// module chunks = 46"],"sourceRoot":""}