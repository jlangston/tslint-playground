{"version":3,"sources":["../node_modules/tslint/lib/rules/typeLiteralDelimiterRule.js"],"names":["Object","defineProperty","exports","value","templateObject_1","tslib_1","__webpack_require__","tsutils_1","ts","Lint","Rule","_super","apply","this","arguments","__extends","prototype","sourceFile","applyWithFunction","walk","metadata","ruleName","description","Utils","dedent","__makeTemplateObject","optionsDescription","options","optionExamples","type","typescriptOnly","FAILURE_STRING_MISSING","FAILURE_STRING_COMMA","FAILURE_STRING_TRAILING","Rules","AbstractRule","ctx","forEachChild","cb","node","isTypeLiteralNode","members","forEach","member","idx","end","shouldOmit","length","isSameLine","getStart","getEnd","delimiter","text","fail","failure","addFailureAt","check"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IA+DAC,EA/DAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MACAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KAmBA,OArBAR,EAAAU,UAAAL,EAAAC,GAIAD,EAAAM,UAAAJ,MAAA,SAAAK,GACA,OAAAJ,KAAAK,kBAAAD,EAAAE,IAGAT,EAAAU,UACAC,SAAA,yBACAC,YAAAb,EAAAc,MAAAC,OAAApB,MAAAC,EAAAoB,sBAAA,kTACAC,mBAAA,oBACAC,QAAA,KACAC,iBAAA,GACAC,KAAA,QACAC,gBAAA,GAGApB,EAAAqB,uBAAA,wDACArB,EAAAsB,qBAAA,mDACAtB,EAAAuB,wBAAA,kEACAvB,EAtBA,CAuBCD,EAAAyB,MAAAC,cAED,SAAAhB,EAAAiB,GACA,IAAAnB,EAAAmB,EAAAnB,WACAT,EAAA6B,aAAApB,EAAA,SAAAqB,EAAAC,GACAhC,EAAAiC,kBAAAD,IAKA,SAAAA,GACAA,EAAAE,QAAAC,QAAA,SAAAC,EAAAC,GACA,IAAAC,EAAAF,EAAAE,IAAA,EAEAC,EAAAF,IAAAL,EAAAE,QAAAM,OAAA,GAAAxC,EAAAyC,WAAA/B,EAAAsB,EAAAU,SAAAhC,GAAAsB,EAAAW,UACAC,EAAAlC,EAAAmC,KAAAP,GACA,OAAAM,GACA,QACAL,GACAO,EAAA3C,EAAAuB,yBAEA,MACA,QACAoB,EAAA3C,EAAAsB,sBACA,MACA,QACAc,GACAO,EAAA3C,EAAAqB,wBAGA,SAAAsB,EAAAC,GACAlB,EAAAmB,aAAAV,EAAA,EAAAS,MAzBAE,CAAAjB,GAEA/B,EAAA6B,aAAAE,EAAAD,KAPApC,EAAAQ","file":"static/js/22.8fa7cff8.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2017 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar tsutils_1 = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithFunction(sourceFile, walk);\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"type-literal-delimiter\",\n        description: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            Checks that type literal members are separated by semicolons.\\n            Enforces a trailing semicolon for multiline type literals.\"], [\"\\n            Checks that type literal members are separated by semicolons.\\n            Enforces a trailing semicolon for multiline type literals.\"]))),\n        optionsDescription: \"Not configurable.\",\n        options: null,\n        optionExamples: [true],\n        type: \"style\",\n        typescriptOnly: true,\n    };\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING_MISSING = \"Expected type literal to use ';' to separate members.\";\n    Rule.FAILURE_STRING_COMMA = \"Expected type literal to use ';' instead of ','.\";\n    Rule.FAILURE_STRING_TRAILING = \"Did not expect single-line type literal to have a trailing ';'.\";\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nfunction walk(ctx) {\n    var sourceFile = ctx.sourceFile;\n    ts.forEachChild(sourceFile, function cb(node) {\n        if (tsutils_1.isTypeLiteralNode(node)) {\n            check(node);\n        }\n        ts.forEachChild(node, cb);\n    });\n    function check(node) {\n        node.members.forEach(function (member, idx) {\n            var end = member.end - 1;\n            // Trailing delimiter should be ommitted for a single-line type literal.\n            var shouldOmit = idx === node.members.length - 1 && tsutils_1.isSameLine(sourceFile, node.getStart(sourceFile), node.getEnd());\n            var delimiter = sourceFile.text[end];\n            switch (delimiter) {\n                case \";\":\n                    if (shouldOmit) {\n                        fail(Rule.FAILURE_STRING_TRAILING);\n                    }\n                    break;\n                case \",\":\n                    fail(Rule.FAILURE_STRING_COMMA);\n                    break;\n                default:\n                    if (!shouldOmit) {\n                        fail(Rule.FAILURE_STRING_MISSING);\n                    }\n            }\n            function fail(failure) {\n                ctx.addFailureAt(end, 1, failure);\n            }\n        });\n    }\n}\nvar templateObject_1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/typeLiteralDelimiterRule.js\n// module id = 2143\n// module chunks = 22"],"sourceRoot":""}