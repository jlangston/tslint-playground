{"version":3,"sources":["../node_modules/tslint/lib/rules/noDuplicateVariableRule.js"],"names":["Object","defineProperty","exports","value","tslib_1","__webpack_require__","utils","ts","Lint","Rule","_super","apply","this","arguments","__extends","FAILURE_STRING","name","prototype","sourceFile","applyWithWalker","NoDuplicateVariableWalker","ruleName","parameters","ruleArguments","indexOf","metadata","description","descriptionDetails","Utils","dedent","templateObject_1","__makeTemplateObject","rationale","templateObject_2","optionsDescription","options","type","enum","optionExamples","typescriptOnly","Rules","AbstractRule","_this","scope","Set","walk","cb","node","isFunctionScopeBoundary","oldScope","forEachChild","isParameterDeclaration","handleBindingName","isVariableDeclarationList","isBlockScopedVariableDeclarationList","_i","_a","declarations","length","variable","check","kind","SyntaxKind","Identifier","has","text","addFailureAtNode","add","elements","e","OmittedExpression","AbstractWalker"],"mappings":"qDAiBAA,OAAAC,eAAAC,EAAA,cAA8CC,OAAA,IAC9C,IAAAC,EAAAC,EAAA,GACAC,EAAAD,EAAA,KACAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,MAEAI,EAAA,SAAAC,GAEA,SAAAD,IACA,cAAAC,KAAAC,MAAAC,KAAAC,YAAAD,KA6BA,OA/BAR,EAAAU,UAAAL,EAAAC,GAKAD,EAAAM,eAAA,SAAAC,GACA,8BAAAA,EAAA,KAEAP,EAAAQ,UAAAN,MAAA,SAAAO,GACA,OAAAN,KAAAO,gBAAA,IAAAC,EAAAF,EAAAN,KAAAS,UACAC,YAAA,IAAAV,KAAAW,cAAAC,QAZA,wBAgBAf,EAAAgB,UACAJ,SAAA,wBACAK,YAAA,qEACAC,mBAAAnB,EAAAoB,MAAAC,OAAAC,MAAA1B,EAAA2B,sBAAA,4UACAC,UAAAxB,EAAAoB,MAAAC,OAAAI,MAAA7B,EAAA2B,sBAAA,0RACAG,mBAAA,iGACAC,SACAC,KAAA,SACAC,MAxBA,qBA0BAC,iBACA,IACA,EA5BA,qBA8BAF,KAAA,gBACAG,gBAAA,GAEA9B,EAhCA,CAiCCD,EAAAgC,MAAAC,cACDvC,EAAAO,OACA,IAmDAqB,EAAAG,EAnDAb,EAAA,SAAAV,GAEA,SAAAU,IACA,IAAAsB,EAAA,OAAAhC,KAAAC,MAAAC,KAAAC,YAAAD,KAEA,OADA8B,EAAAC,MAAA,IAAAC,IACAF,EA4CA,OAhDAtC,EAAAU,UAAAM,EAAAV,GAMAU,EAAAH,UAAA4B,KAAA,SAAA3B,GACA,IAAAwB,EAAA9B,KACAA,KAAA+B,MAAA,IAAAC,IACA,IAAAE,EAAA,SAAAC,GACA,GAAAzC,EAAA0C,wBAAAD,GAAA,CACA,IAAAE,EAAAP,EAAAC,MAIA,OAHAD,EAAAC,MAAA,IAAAC,IACArC,EAAA2C,aAAAH,EAAAD,QACAJ,EAAAC,MAAAM,GAGA,GAAAP,EAAAP,QAAAb,YAAAhB,EAAA6C,uBAAAJ,GACAL,EAAAU,kBAAAL,EAAA/B,MAAA,QAEA,GAAAV,EAAA+C,0BAAAN,KAAAzC,EAAAgD,qCAAAP,GACA,QAAAQ,EAAA,EAAAC,EAAAT,EAAAU,aAAwDF,EAAAC,EAAAE,OAAgBH,IAAA,CACxE,IAAAI,EAAAH,EAAAD,GACAb,EAAAU,kBAAAO,EAAA3C,MAAA,GAGA,OAAAT,EAAA2C,aAAAH,EAAAD,IAEA,OAAAvC,EAAA2C,aAAAhC,EAAA4B,IAEA1B,EAAAH,UAAAmC,kBAAA,SAAApC,EAAA4C,GACA,GAAA5C,EAAA6C,OAAAtD,EAAAuD,WAAAC,WACAH,GAAAhD,KAAA+B,MAAAqB,IAAAhD,EAAAiD,MACArD,KAAAsD,iBAAAlD,EAAAP,EAAAM,eAAAC,EAAAiD,OAGArD,KAAA+B,MAAAwB,IAAAnD,EAAAiD,WAIA,QAAAV,EAAA,EAAAC,EAAAxC,EAAAoD,SAAgDb,EAAAC,EAAAE,OAAgBH,IAAA,CAChE,IAAAc,EAAAb,EAAAD,GACAc,EAAAR,OAAAtD,EAAAuD,WAAAQ,mBACA1D,KAAAwC,kBAAAiB,EAAArD,KAAA4C,KAKAxC,EAjDA,CAkDCZ,EAAA+D","file":"static/js/99.aff7266a.chunk.js","sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2013 Palantir Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar utils = require(\"tsutils\");\nvar ts = require(\"typescript\");\nvar Lint = require(\"../index\");\nvar OPTION_CHECK_PARAMETERS = \"check-parameters\";\nvar Rule = /** @class */ (function (_super) {\n    tslib_1.__extends(Rule, _super);\n    function Rule() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /* tslint:enable:object-literal-sort-keys */\n    Rule.FAILURE_STRING = function (name) {\n        return \"Duplicate variable: '\" + name + \"'\";\n    };\n    Rule.prototype.apply = function (sourceFile) {\n        return this.applyWithWalker(new NoDuplicateVariableWalker(sourceFile, this.ruleName, {\n            parameters: this.ruleArguments.indexOf(OPTION_CHECK_PARAMETERS) !== -1,\n        }));\n    };\n    /* tslint:disable:object-literal-sort-keys */\n    Rule.metadata = {\n        ruleName: \"no-duplicate-variable\",\n        description: \"Disallows duplicate variable declarations in the same block scope.\",\n        descriptionDetails: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"\\n            This rule is only useful when using the `var` keyword -\\n            the compiler will detect redeclarations of `let` and `const` variables.\"], [\"\\n            This rule is only useful when using the \\\\`var\\\\` keyword -\\n            the compiler will detect redeclarations of \\\\`let\\\\` and \\\\`const\\\\` variables.\"]))),\n        rationale: Lint.Utils.dedent(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"\\n            A variable can be reassigned if necessary -\\n            there's no good reason to have a duplicate variable declaration.\"], [\"\\n            A variable can be reassigned if necessary -\\n            there's no good reason to have a duplicate variable declaration.\"]))),\n        optionsDescription: \"You can specify `\\\"\" + OPTION_CHECK_PARAMETERS + \"\\\"` to check for variables with the same name as a parameter.\",\n        options: {\n            type: \"string\",\n            enum: [OPTION_CHECK_PARAMETERS],\n        },\n        optionExamples: [\n            true,\n            [true, OPTION_CHECK_PARAMETERS],\n        ],\n        type: \"functionality\",\n        typescriptOnly: false,\n    };\n    return Rule;\n}(Lint.Rules.AbstractRule));\nexports.Rule = Rule;\nvar NoDuplicateVariableWalker = /** @class */ (function (_super) {\n    tslib_1.__extends(NoDuplicateVariableWalker, _super);\n    function NoDuplicateVariableWalker() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.scope = new Set();\n        return _this;\n    }\n    NoDuplicateVariableWalker.prototype.walk = function (sourceFile) {\n        var _this = this;\n        this.scope = new Set();\n        var cb = function (node) {\n            if (utils.isFunctionScopeBoundary(node)) {\n                var oldScope = _this.scope;\n                _this.scope = new Set();\n                ts.forEachChild(node, cb);\n                _this.scope = oldScope;\n                return;\n            }\n            if (_this.options.parameters && utils.isParameterDeclaration(node)) {\n                _this.handleBindingName(node.name, false);\n            }\n            else if (utils.isVariableDeclarationList(node) && !utils.isBlockScopedVariableDeclarationList(node)) {\n                for (var _i = 0, _a = node.declarations; _i < _a.length; _i++) {\n                    var variable = _a[_i];\n                    _this.handleBindingName(variable.name, true);\n                }\n            }\n            return ts.forEachChild(node, cb);\n        };\n        return ts.forEachChild(sourceFile, cb);\n    };\n    NoDuplicateVariableWalker.prototype.handleBindingName = function (name, check) {\n        if (name.kind === ts.SyntaxKind.Identifier) {\n            if (check && this.scope.has(name.text)) {\n                this.addFailureAtNode(name, Rule.FAILURE_STRING(name.text));\n            }\n            else {\n                this.scope.add(name.text);\n            }\n        }\n        else {\n            for (var _i = 0, _a = name.elements; _i < _a.length; _i++) {\n                var e = _a[_i];\n                if (e.kind !== ts.SyntaxKind.OmittedExpression) {\n                    this.handleBindingName(e.name, check);\n                }\n            }\n        }\n    };\n    return NoDuplicateVariableWalker;\n}(Lint.AbstractWalker));\nvar templateObject_1, templateObject_2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/tslint/lib/rules/noDuplicateVariableRule.js\n// module id = 2060\n// module chunks = 99"],"sourceRoot":""}